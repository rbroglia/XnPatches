#!/usr/bin/make
#----------------------------------------------------------------------------------------------------------------------------------
# make init

# shell
SHELL = /bin/bash
# no verbose
$(VERBOSE).SILENT:
#----------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------
# User options
COMPILER = intel
DEBUG    = no
F03STD   = no
OPTIMIZE = yes
OPENMP   = no
R16P     = no
DEXE     = ./

.PHONY : DEFAULTRULE
DEFAULTRULE: $(DEXE)XnPatches

.PHONY : help
help:
	@echo
	@echo -e '\033[1;31m Make options of XnPatches code\033[0m'
	@echo
	@echo -e '\033[1;31m Compiler choice\033[0m'
	@echo -e '\033[1;31m  COMPILER=gnu  \033[0m\033[1m => GNU gfortran           \033[0m'
	@echo -e '\033[1;31m  COMPILER=intel\033[0m\033[1m => Intel Fortran         \033[0m'
	@echo -e '\033[1;31m  COMPILER=pgi  \033[0m\033[1m => Portland Group Fortran\033[0m'
	@echo -e '\033[1;31m  COMPILER=g95  \033[0m\033[1m => free g95              \033[0m'
	@echo -e '\033[1;31m  COMPILER=$(COMPILER)  \033[0m\033[1m => default         \033[0m'
	@echo
	@echo -e '\033[1;31m Compiling options\033[0m'
	@echo -e '\033[1;31m  DEBUG=yes(no)   \033[0m\033[1m => on(off) debug                  (default $(DEBUG))\033[0m'
	@echo -e '\033[1;31m  F03STD=yes(no)  \033[0m\033[1m => on(off) check standard fortran (default $(F03STD))\033[0m'
	@echo -e '\033[1;31m  OPTIMIZE=yes(no)\033[0m\033[1m => on(off) optimization           (default $(OPTIMIZE))\033[0m'
	@echo -e '\033[1;31m  OPENMP=yes(no)  \033[0m\033[1m => on(off) OpenMP directives      (default $(OPENMP))\033[0m'
	@echo
	@echo -e '\033[1;31m Preprocessing options\033[0m'
	@echo -e '\033[1;31m  R16P=yes(no)\033[0m\033[1m => on(off) definition of real with "128 bit" (default $(R16P))\033[0m'
	@echo
	@echo -e '\033[1;31m Executable directory\033[0m'
	@echo -e '\033[1;31m  DEXE="your_path"\033[0m\033[1m => directory where exe is placed (default $(DEXE))\033[0m'
	@echo
#----------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------
# directory & file
DSRC  = ./src/
DOBJ  = ./obj/
DMOD  = ./mod/
DLIB  = ./lib/
VPATH = $(DSRC) $(DOBJ) $(DMOD) $(DLIB)

MKDIRS = $(DOBJ) $(DMOD) $(DEXE)
LBITS := $(shell getconf LONG_BIT)
ifeq ($(LBITS),64)
  LIBS = $(DLIB)64bit/tecio64.a $(DLIB)64bit/libstdc++64.5.0.7.so
else
  LIBS = $(DLIB)32bit/tecio.a $(DLIB)32bit/libstdc++.5.0.7.so
endif
#----------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------
# compiling and linking options
ifeq "$(COMPILER)" "gnu"
  OPTSC   = -cpp -c -J$(DMOD)
  OPTSL   =
  PREPROC =
  # debug
  ifeq "$(DEBUG)" "yes"
    PREPROC := $(PREPROC) -DDEBUG
    OPTSC := $(OPTSC) -O0 -Wall -Warray-bounds -fcheck=all -fbacktrace -ffpe-trap=invalid,overflow,underflow
    OPTSL := $(OPTSL) -O0 -Wall -Warray-bounds -fcheck=all -fbacktrace -ffpe-trap=invalid,overflow,underflow
#-Warray-temporaries
  endif
  # standard
  ifeq "$(F03STD)" "yes"
    OPTSC := $(OPTSC) -std=f2008 -fall-intrinsics
    OPTSL := $(OPTSL) -std=f2008 -fall-intrinsics
  endif
  # optimization
  ifeq "$(OPTIMIZE)" "yes"
    OPTSC := $(OPTSC) -O3
    OPTSL := $(OPTSL) -O3
  endif
  # openmp
  ifeq "$(OPENMP)" "yes"
    OPTSC := $(OPTSC) -fopenmp
    OPTSL := $(OPTSL) -fopenmp
    PREPROC := $(PREPROC) -DOPENMP
  endif
  # mpi
  ifeq "$(MPI)" "yes"
    PREPROC := $(PREPROC) -DMPI2
    FC = mpif90
  else
    FC = gfortran
  endif
endif
ifeq "$(COMPILER)" "intel"
  OPTSC   = -cpp -c -module $(DMOD)
  OPTSL   =
  PREPROC =
  # debug
  ifeq "$(DEBUG)" "yes"
    PREPROC := $(PREPROC) -DDEBUG
    CHK = -check all -check noarg_temp_created
    DEB = -debug all
    WRN = -warn all
    OPTSC := $(OPTSC) -O0 -fpe-all=0 -fp-stack-check -traceback $(WRN) $(CHK) $(DEB)
    OPTSL := $(OPTSL) -O0 -fpe-all=0 -fp-stack-check -traceback $(WRN) $(CHK) $(DEB)
  endif
  # standard
  ifeq "$(F03STD)" "yes"
    OPTSC := $(OPTSC) -std03
    OPTSL := $(OPTSL) -std03
  endif
  # optimization
  ifeq "$(OPTIMIZE)" "yes"
    OPTSC := $(OPTSC) -O3
    OPTSL := $(OPTSL) -O3
  endif
  # openmp
  ifeq "$(OPENMP)" "yes"
    OPTSC := $(OPTSC) -openmp
    OPTSL := $(OPTSL) -openmp
    PREPROC := $(PREPROC) -DOPENMP
  endif
  # mpi
  ifeq "$(MPI)" "yes"
    PREPROC := $(PREPROC) -DMPI2
    FC = mpif90
  else
    FC = ifort
  endif
endif
ifeq "$(COMPILER)" "pgi"
  OPTSC   = -Mpreprocess -c -module $(DMOD)
  OPTSL   =
  PREPROC = -Dpgf95
  # debug
  ifeq "$(DEBUG)" "yes"
    PREPROC := $(PREPROC) -DDEBUG
    OPTSC := $(OPTSC) -C -g -Mbounds -Mchkstk
    OPTSL := $(OPTSL) -C -g -Mbounds -Mchkstk
  endif
  # standard
  ifeq "$(F03STD)" "yes"
    OPTSC := $(OPTSC) -Mstandard
    OPTSL := $(OPTSL) -Mstandard
  endif
  # optimization
  ifeq "$(OPTIMIZE)" "yes"
    OPTSC := $(OPTSC) -O1
    OPTSL := $(OPTSL) -O1
  endif
  # openmp
  ifeq "$(OPENMP)" "yes"
    OPTSC := $(OPTSC) -mp
    OPTSL := $(OPTSL) -mp
    PREPROC := $(PREPROC) -DOPENMP
  endif
  # mpi
  ifeq "$(MPI)" "yes"
    PREPROC := $(PREPROC) -DMPI2
    FC = mpif90
  else
    FC = pgf95
  endif
endif
ifeq "$(COMPILER)" "g95"
  OPTSC   = -cpp -c -fmod=$(DMOD)
  OPTSL   =
  PREPROC =
  # debug
  ifeq "$(DEBUG)" "yes"
    PREPROC := $(PREPROC) -DDEBUG
    OPTSC := $(OPTSC) -O0 -g
    OPTSL := $(OPTSL) -O0 -g
  endif
  # standard
  ifeq "$(F03STD)" "yes"
    OPTSC := $(OPTSC) -std=f2003 -fintrinsic-extensions
    OPTSL := $(OPTSL) -std=f2003 -fintrinsic-extensions
  endif
  # optimization
  ifeq "$(OPTIMIZE)" "yes"
    OPTSC := $(OPTSC) -O3
    OPTSL := $(OPTSL) -O3
  endif
  FC = g95
endif
# pre-processing options
# R16 precision
R16PCHK = (Unknown R16P switch) Used default R16P=no
ifeq "$(R16P)" "no"
  R16PCHK = (Known R16P switch) Used R16P=$(R16P)
endif
ifeq "$(R16P)" "yes"
  R16PCHK = (Known R16P switch) Used R16P=$(R16P)
  PREPROC := $(PREPROC) -Dr16p
endif
OPTSC := $(OPTSC) $(PREPROC)
OPTSL := $(OPTSL) $(PREPROC)

WHICHFC = $(shell which $(FC))

PRINTCHK = "\\033[1;31m Compiler used \\033[0m\\033[1m $(COMPILER) => $(WHICHFC)\\033[0m \n\
            \\033[1;31mSource dir    \\033[0m\\033[1m $(DSRC)\\033[0m \n\
            \\033[1;31mLibraries     \\033[0m\\033[1m $(LIBS)\\033[0m \n \n\
            \\033[1;31m Debug         \\033[0m\\033[1m $(DEBUG)\\033[0m \n\
            \\033[1;31m F-standard    \\033[0m\\033[1m $(F03STD)\\033[0m \n\
            \\033[1;31m Optimize      \\033[0m\\033[1m $(OPTIMIZE)\\033[0m \n\
            \\033[1;31m OpenMP        \\033[0m\\033[1m $(OPENMP)\\033[0m \n\
            \\033[1;31m R16P          \\033[0m\\033[1m $(R16PCHK)\\033[0m\n\
	    \\033[1;31m DEXE          \\033[0m\\033[1m $(DEXE)\\033[0m"
#----------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------
.PHONY : PRINTINFO
.NOTPARALLEL : PRINTINFO
PRINTINFO:
	@echo | tee make.log
	@echo -e $(PRINTCHK) | tee -a make.log
	@echo | tee -a make.log
	@echo -e '\033[1;31m Compiling options\033[0m' | tee -a make.log
	@echo -e '\033[1m [$(OPTSC)]\033[0m' | tee -a make.log
	@echo | tee -a make.log
	@echo -e '\033[1;31m Linking options \033[0m' | tee -a make.log
	@echo -e '\033[1m [$(OPTSL)]\033[0m' | tee -a make.log
	@echo | tee -a make.log

.PHONY : cleanobj
cleanobj:
	@echo -e "\033[1;31m deleting objects \033[0m" | tee make.log
	@rm -fr $(DOBJ)

.PHONY : cleanmod
cleanmod:
	@echo -e "\033[1;31m deleting mods \033[0m" | tee -a make.log
	@rm -fr $(DMOD)

.PHONY : cleanexe
cleanexe:
	@echo -e "\033[1;31m deleting exes \033[0m" | tee -a make.log
	@rm -f $(addprefix $(DEXE),$(EXES))

.PHONY : cleanmsg
cleanmsg:
	@rm -f diagnostic_messages
	@rm -f error_messages

.PHONY : clean
clean: cleanobj cleanmod cleanmsg

.PHONY : cleanall
cleanall: clean cleanexe

.PHONY : tar
tar: cleanall
	@echo -e "\033[1;31m Creating tar archive of the code \033[0m" | tee make.log
	@mkdir -p XnPatches
	@cp -rL lib util src makefile XnPatches/
	@tar czf XnPatches.tgz XnPatches
	@rm -rf XnPatches

.PHONY : $(MKDIRS)
$(MKDIRS):
	@mkdir -p $@
#----------------------------------------------------------------------------------------------------------------------------------

